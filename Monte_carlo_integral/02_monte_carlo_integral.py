# -*- coding: utf-8 -*-
"""Monte_carlo_integral_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q4YLwKvdrjB2cfyLPoe6WZc6sOEUQb_n
"""

import random
import math
import matplotlib.pyplot as plt

n=[100, 1000, 5000, 10000]
error=[]


for trials in n:
  func_sum=0
  func_sqrd_sum=0
  for i in range(trials):
     x= random.uniform(0,8)
          
     if x>=0 and x<=4:
       func = math.sqrt(4*x)
       func_sum= func_sum+func
       func_sqrd_sum = func_sqrd_sum+(func**2)

     else:
       func = 8-x
       func_sum= func_sum+func
       func_sqrd_sum = func_sqrd_sum+(func**2)




  func_average = func_sum/trials
  func_sqrd_average = func_sqrd_sum/trials
  integral_value = func_average*(8-0) #a=0,b=8
  error_value = ((8-0)/(math.sqrt(trials)))*(math.sqrt(func_sqrd_average-(func_average**2)))
  error.append(error_value)

  print(f"For number of points : {trials}")
  print(f"Area : {integral_value}")
  print(f"Estimated error : {error_value}")